AWSTemplateFormatVersion: '2010-09-09'
Description: 'CI/CD Infrastructure for Bibidi Backend - Complete Stack with VPC, ALB, ASG, CodeDeploy, and OIDC'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "GitHub Configuration"
        Parameters:
          - GitHubOrg
          - GitHubRepo
          - GitHubThumbprint
      - Label:
          default: "Environment Configuration"
        Parameters:
          - EnvironmentName
      - Label:
          default: "EC2 Auto Scaling Configuration"
        Parameters:
          - InstanceType
          - MinSize
          - MaxSize
          - DesiredCapacity
      - Label:
          default: "Database Configuration"
        Parameters:
          - DatabaseSecretArn
    ParameterLabels:
      GitHubOrg:
        default: "GitHub Organization"
      GitHubRepo:
        default: "GitHub Repository"
      GitHubThumbprint:
        default: "GitHub OIDC Thumbprint"
      EnvironmentName:
        default: "Environment Name"
      InstanceType:
        default: "EC2 Instance Type"
      MinSize:
        default: "Minimum Number of Instances"
      MaxSize:
        default: "Maximum Number of Instances"
      DesiredCapacity:
        default: "Desired Number of Instances"
      DatabaseSecretArn:
        default: "Database Secret ARN (Optional)"

Parameters:
  GitHubOrg:
    Type: String
    Default: Frame-and-Furnish
    Description: GitHub organization name
  
  GitHubRepo:
    Type: String
    Default: bibidi_backend
    Description: GitHub repository name
  
  GitHubThumbprint:
    Type: String
    Default: 6938fd4d98bab03faadb97b34396831e3780aea1
    Description: GitHub OIDC thumbprint (current as of 2022)
  
  EnvironmentName:
    Type: String
    Default: production
    AllowedValues:
      - development
      - staging
      - production
    Description: Environment name
  
  InstanceType:
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
    Description: EC2 instance type
  
  MinSize:
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 10
    Description: Minimum number of EC2 instances
  
  MaxSize:
    Type: Number
    Default: 4
    MinValue: 1
    MaxValue: 10
    Description: Maximum number of EC2 instances
  
  DesiredCapacity:
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 10
    Description: Desired number of EC2 instances
  
  DatabaseSecretArn:
    Type: String
    Default: ''
    Description: ARN of the database secret in Secrets Manager (optional - leave empty for initial setup)

Conditions:
  HasDatabaseSecret: !Not [!Equals [!Ref DatabaseSecretArn, '']]

Mappings:
  RegionMap:
    ca-central-1:
      AMI: ami-0c9bfc21ac5bf10eb  # Amazon Linux 2 (Canada Central)
    us-east-1:
      AMI: ami-0c55b159cbfafe1f0  # Amazon Linux 2
    us-west-2:
      AMI: ami-0d1cd67c26f5fca19

Resources:
  # ============================================
  # VPC and Networking
  # ============================================
  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-bibidi-vpc'
        - Key: Environment
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-bibidi-igw'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-bibidi-public-subnet-1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-bibidi-public-subnet-2'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-bibidi-public-rt'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # ============================================
  # Security Groups
  # ============================================

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${EnvironmentName}-bibidi-alb-sg'
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow HTTP from internet
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow HTTPS from internet
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-bibidi-alb-sg'

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${EnvironmentName}-bibidi-ec2-sg'
      GroupDescription: Security group for EC2 instances - only allows traffic from ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Allow traffic from ALB on port 3000
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-bibidi-ec2-sg'

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${EnvironmentName}-bibidi-rds-sg'
      GroupDescription: Security group for RDS PostgreSQL - only allows traffic from EC2
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref EC2SecurityGroup
          Description: Allow PostgreSQL traffic from EC2 instances
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-bibidi-rds-sg'

  # ============================================
  # RDS PostgreSQL Database
  # ============================================

  # Private Subnets for RDS (best practice)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.10.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-bibidi-private-subnet-1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-bibidi-private-subnet-2'

  # DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub '${EnvironmentName}-bibidi-db-subnet-group'
      DBSubnetGroupDescription: Subnet group for RDS PostgreSQL
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-bibidi-db-subnet-group'

  # RDS Parameter Group (PostgreSQL configuration)
  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: PostgreSQL parameter group for Bibidi Backend
      Family: postgres15
      Parameters:
        log_statement: all
        log_min_duration_statement: 1000
        shared_preload_libraries: pg_stat_statements
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-bibidi-db-params'

  # RDS PostgreSQL Instance
  PostgreSQLDatabase:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      DBInstanceIdentifier: !Sub '${EnvironmentName}-bibidi-postgres'
      Engine: postgres
      EngineVersion: '15.4'
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      MaxAllocatedStorage: 100
      StorageType: gp3
      StorageEncrypted: true
      
      # Database credentials (stored in Secrets Manager)
      MasterUsername: bibidi_admin
      ManageMasterUserPassword: true
      MasterUserSecret:
        KmsKeyId: alias/aws/secretsmanager
      
      # Networking
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      PubliclyAccessible: false
      
      # High Availability (Multi-AZ for production)
      MultiAZ: true
      
      # Backups
      BackupRetentionPeriod: 7
      PreferredBackupWindow: '03:00-04:00'
      PreferredMaintenanceWindow: 'sun:04:00-sun:05:00'
      CopyTagsToSnapshot: true
      DeleteAutomatedBackups: false
      
      # Performance Insights
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      
      # Monitoring
      EnableCloudwatchLogsExports:
        - postgresql
        - upgrade
      MonitoringInterval: 60
      MonitoringRoleArn: !GetAtt RDSMonitoringRole.Arn
      
      # Parameter Group
      DBParameterGroupName: !Ref DBParameterGroup
      
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-bibidi-postgres'
        - Key: Environment
          Value: !Ref EnvironmentName

  # IAM Role for RDS Enhanced Monitoring
  RDSMonitoringRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: monitoring.rds.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-RDSMonitoringRole'

  # ============================================
  # S3 Bucket for Artifacts
  # ============================================
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'bibidi-backend-artifacts-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldArtifacts
            Status: Enabled
            ExpirationInDays: 30
            NoncurrentVersionExpirationInDays: 7
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-bibidi-artifacts'
        - Key: Environment
          Value: !Ref EnvironmentName

  # ============================================
  # S3 Bucket for ALB Access Logs
  # ============================================
  ALBLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'bibidi-backend-alb-logs-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: 90
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-bibidi-alb-logs'
        - Key: Environment
          Value: !Ref EnvironmentName

  ALBLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ALBLogsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSLogDeliveryWrite
            Effect: Allow
            Principal:
              Service: elasticloadbalancing.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub '${ALBLogsBucket.Arn}/*'
          - Sid: AWSLogDeliveryAclCheck
            Effect: Allow
            Principal:
              Service: elasticloadbalancing.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt ALBLogsBucket.Arn

  # ============================================
  # IAM - OIDC Provider for GitHub Actions
  # ============================================

  GitHubOIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - !Ref GitHubThumbprint
      Tags:
        - Key: Name
          Value: GitHub-OIDC-Provider

  # ============================================
  # IAM - GitHub Actions Role
  # ============================================

  GitHubActionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${EnvironmentName}-GitHubActionsRole-BibidiBackend'
      Description: IAM role for GitHub Actions to deploy Bibidi Backend
      MaxSessionDuration: 3600
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !GetAtt GitHubOIDCProvider.Arn
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud: sts.amazonaws.com
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub 'repo:${GitHubOrg}/${GitHubRepo}:*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployDeployerAccess
      Policies:
        - PolicyName: S3ArtifactAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListBucket
                Resource:
                  - !GetAtt ArtifactBucket.Arn
                  - !Sub '${ArtifactBucket.Arn}/*'
        - PolicyName: CodeDeployAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                  - codedeploy:GetApplicationRevision
                  - codedeploy:CreateDeployment
                  - codedeploy:GetDeployment
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-GitHubActionsRole'

  # ============================================
  # IAM - EC2 Instance Role
  # ============================================

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${EnvironmentName}-BibidiBackend-EC2Role'
      Description: IAM role for EC2 instances running Bibidi Backend
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: S3ArtifactDownload
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt ArtifactBucket.Arn
                  - !Sub '${ArtifactBucket.Arn}/*'
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:bibidi/*'
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:rds!*'
        - PolicyName: CloudFormationReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:ListStacks
                Resource: '*'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/bibidi/*'
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-EC2Role'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${EnvironmentName}-BibidiBackend-EC2Profile'
      Roles:
        - !Ref EC2InstanceRole

  # ============================================
  # Application Load Balancer
  # ============================================

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: ALBLogsBucketPolicy
    Properties:
      Name: !Sub '${EnvironmentName}-bibidi-backend-alb'
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: 'true'
        - Key: access_logs.s3.bucket
          Value: !Ref ALBLogsBucket
        - Key: idle_timeout.timeout_seconds
          Value: '60'
        - Key: deletion_protection.enabled
          Value: 'false'
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-bibidi-backend-alb'
        - Key: Environment
          Value: !Ref EnvironmentName

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${EnvironmentName}-bibidi-backend-tg'
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200
      TargetType: instance
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-bibidi-backend-tg'
        - Key: Environment
          Value: !Ref EnvironmentName

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # ============================================
  # Launch Template
  # ============================================

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${EnvironmentName}-bibidi-backend-lt'
      LaunchTemplateData:
        ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub '${EnvironmentName}-bibidi-backend-instance'
              - Key: Environment
                Value: !Ref EnvironmentName
              - Key: Application
                Value: BibidiBackend
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -e
            
            # Log all output
            exec > >(tee /var/log/user-data.log)
            exec 2>&1
            
            echo "Starting instance initialization..."
            
            # Update system
            yum update -y
            
            # Install Node.js 18
            echo "Installing Node.js 18..."
            curl -sL https://rpm.nodesource.com/setup_18.x | bash -
            yum install -y nodejs
            
            # Verify Node.js installation
            node --version
            npm --version
            
            # Install PM2 globally
            echo "Installing PM2..."
            npm install -g pm2
            pm2 startup systemd -u ec2-user --hp /home/ec2-user
            
            # Install CodeDeploy Agent
            echo "Installing CodeDeploy Agent..."
            yum install -y ruby wget
            cd /home/ec2-user
            wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
            chmod +x ./install
            ./install auto
            service codedeploy-agent start
            
            # Create application directory
            echo "Creating application directory..."
            mkdir -p /var/www/bibidi-backend
            chown -R ec2-user:ec2-user /var/www/bibidi-backend
            
            # Install CloudWatch Agent (optional but recommended)
            echo "Installing CloudWatch Agent..."
            wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
            rpm -U ./amazon-cloudwatch-agent.rpm
            
            # Create log directory
            mkdir -p /var/log/bibidi-backend
            chown -R ec2-user:ec2-user /var/log/bibidi-backend
            
            echo "Instance initialization complete!"

  # ============================================
  # Auto Scaling Group
  # ============================================

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: 
      - PublicRoute
    Properties:
      AutoScalingGroupName: !Sub '${EnvironmentName}-bibidi-backend-asg'
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-bibidi-backend-instance'
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref EnvironmentName
          PropagateAtLaunch: true

  # ============================================
  # Auto Scaling Policies
  # ============================================

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 60
      ScalingAdjustment: 1

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 60
      ScalingAdjustment: -1

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${EnvironmentName}-bibidi-backend-cpu-high'
      AlarmDescription: Scale up when CPU exceeds 70%
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      AlarmActions:
        - !Ref ScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${EnvironmentName}-bibidi-backend-cpu-low'
      AlarmDescription: Scale down when CPU is below 30%
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 30
      AlarmActions:
        - !Ref ScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      ComparisonOperator: LessThanThreshold

  # ============================================
  # CodeDeploy
  # ============================================

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${EnvironmentName}-CodeDeployServiceRole-BibidiBackend'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRole
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-CodeDeployServiceRole'

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub '${EnvironmentName}-BibidiBackendApp'
      ComputePlatform: Server
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-BibidiBackendApp'
        - Key: Environment
          Value: !Ref EnvironmentName

  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub '${EnvironmentName}-bibidi-backend-dg'
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      AutoScalingGroups:
        - !Ref AutoScalingGroup
      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name: !GetAtt TargetGroup.TargetGroupName
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
          - DEPLOYMENT_STOP_ON_ALARM
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-DeploymentGroup'

# ============================================
# Outputs
# ============================================

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${EnvironmentName}-BibidiBackend-VPC'

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub '${EnvironmentName}-BibidiBackend-PublicSubnet1'

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub '${EnvironmentName}-BibidiBackend-PublicSubnet2'

  S3BucketName:
    Description: S3 Bucket for deployment artifacts
    Value: !Ref ArtifactBucket
    Export:
      Name: !Sub '${EnvironmentName}-BibidiBackend-ArtifactBucket'

  ALBLogsBucketName:
    Description: S3 Bucket for ALB access logs
    Value: !Ref ALBLogsBucket
    Export:
      Name: !Sub '${EnvironmentName}-BibidiBackend-ALBLogsBucket'

  GitHubActionsRoleArn:
    Description: IAM Role ARN for GitHub Actions (add this to GitHub Secrets as AWS_ROLE_ARN)
    Value: !GetAtt GitHubActionsRole.Arn
    Export:
      Name: !Sub '${EnvironmentName}-BibidiBackend-GitHubActionsRoleArn'

  LoadBalancerURL:
    Description: URL of the Application Load Balancer
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'
    Export:
      Name: !Sub '${EnvironmentName}-BibidiBackend-LoadBalancerURL'

  LoadBalancerDNS:
    Description: DNS name of the Application Load Balancer (for Route53)
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${EnvironmentName}-BibidiBackend-LoadBalancerDNS'

  LoadBalancerHostedZone:
    Description: Hosted Zone ID of the Application Load Balancer (for Route53)
    Value: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Sub '${EnvironmentName}-BibidiBackend-LoadBalancerHostedZone'

  CodeDeployApplication:
    Description: CodeDeploy Application Name (add this to GitHub Secrets as CODEDEPLOY_APP)
    Value: !Ref CodeDeployApplication
    Export:
      Name: !Sub '${EnvironmentName}-BibidiBackend-CodeDeployApp'

  DeploymentGroup:
    Description: CodeDeploy Deployment Group Name (add this to GitHub Secrets as CODEDEPLOY_GROUP)
    Value: !Ref DeploymentGroup
    Export:
      Name: !Sub '${EnvironmentName}-BibidiBackend-DeploymentGroup'

  EC2SecurityGroupId:
    Description: Security Group ID for EC2 instances
    Value: !Ref EC2SecurityGroup
    Export:
      Name: !Sub '${EnvironmentName}-BibidiBackend-EC2SecurityGroup'

  ALBSecurityGroupId:
    Description: Security Group ID for Application Load Balancer
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub '${EnvironmentName}-BibidiBackend-ALBSecurityGroup'

  # Database Outputs
  DatabaseEndpoint:
    Description: PostgreSQL database endpoint
    Value: !GetAtt PostgreSQLDatabase.Endpoint.Address
    Export:
      Name: !Sub '${EnvironmentName}-BibidiBackend-DatabaseEndpoint'

  DatabasePort:
    Description: PostgreSQL database port
    Value: !GetAtt PostgreSQLDatabase.Endpoint.Port
    Export:
      Name: !Sub '${EnvironmentName}-BibidiBackend-DatabasePort'

  DatabaseName:
    Description: PostgreSQL database name (default 'postgres')
    Value: postgres
    Export:
      Name: !Sub '${EnvironmentName}-BibidiBackend-DatabaseName'

  DatabaseSecretArn:
    Description: ARN of the secret containing database master password
    Value: !GetAtt PostgreSQLDatabase.MasterUserSecret.SecretArn
    Export:
      Name: !Sub '${EnvironmentName}-BibidiBackend-DatabaseSecretArn'

  DatabaseConnectionString:
    Description: Database connection string template (replace PASSWORD with actual password from Secrets Manager)
    Value: !Sub 'postgresql://bibidi_admin:PASSWORD@${PostgreSQLDatabase.Endpoint.Address}:${PostgreSQLDatabase.Endpoint.Port}/postgres'
    Export:
      Name: !Sub '${EnvironmentName}-BibidiBackend-DatabaseConnectionString'
